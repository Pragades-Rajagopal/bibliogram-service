export default {
  databaseErrors: {
    unique_constraint: "UNIQUE constraint failed",
    constraint: "SQLITE_CONSTRAINT",
  },
  statusCode: {
    success: 200,
    error: 400,
    unauthorized: 401,
    forbidden: 403,
    notFound: 404,
    serverError: 500,
  },
  user: {
    registered: "User registered successfully",
    notRegistered: "User not registered",
    invalidAuth: "Private key is not correct",
    logoutSuccess: "User logged out successfully",
    loginNotFound: "User have not logged in yet",
    deactivationSuccess: "User successfully deactivated",
    deactivationError: "Error while deactivating user",
  },
  authenticationMessage: {
    tokenMissing: "Please send auth token in request headers",
    userIdMissing: "Please send 'userId' in request headers",
    invalidToken: "Invalid token! Cannot authenticate at this moment",
    unauthorized: "You are not authorized to perform this action",
  },
  commonServerError: {
    internal: "Internal Server Error",
    badRequest: "Bad request",
    forbidden: "You do not have access to this operation",
  },
  loginService: {
    hash: {
      success: "Private key hashed",
      error: "Error while hashing the private key",
    },
    verification: {
      success: "User verified",
      error: "Error while verifying the private key",
    },
  },
  books: {
    addSuccess: "Book(s) added successfully",
    addFailure: "Error while adding book(s)",
    found: "Book detail found",
    notFound: "Book detail not found for the given id or query",
    getError: "Error while getting book detail",
    getTopBooksError: "Error while getting top books detail",
    deleteSuccess: "Book(s) deleted successfully",
    deleteError: "Error while deleting books",
  },
  bookNote: {
    addSuccess: "Note added successfully",
    addOrUpdateFailure: "Error while adding/updating note",
    found: "Note found",
    notFound: "Note(s) not found for the given id or query",
    getError: "Error while retrieving notes",
    updateSuccess: "Note updated successfully",
    deleteSuccess: "Note deleted successfully",
    deleteFailure: "Error while deleting note",
    publicFlag: "public",
    privateFlag: "private",
    updateFlagSuccess: "Visibility updated successfully",
    updateFlagFailure: "Visibility update failure",
    badRequest: "Flag should be either 'public' or 'private'",
  },
  comment: {
    addSuccess: "Comment added successfully",
    addOrUpdateFailure: "Error while adding/updating comment",
    found: "Comment found",
    notFound: "Comment(s) not found for the given id or query",
    getError: "Error while retrieving comment",
    updateSuccess: "Comment updated successfully",
    deleteSuccess: "Comment deleted successfully",
    deleteFailure: "Error while deleting comment",
  },
};
